import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface ScoreBreakdown {
  health: {
    total: number;
    max: number;
    percentage: number;
    components: Record<string, number>;
  };
  wealth: {
    total: number;
    max: number;
    percentage: number;
    components: Record<string, number>;
  };
  relationships: {
    total: number;
    max: number;
    percentage: number;
    components: Record<string, number>;
  };
  overall: {
    total: number;
    max: number;
    percentage: number;
    grade: string;
    level: string;
  };
}

interface UserProfile {
  age?: number;
  gender?: string;
  occupation?: string;
  location?: string;
}

interface Recommendation {
  title: string;
  description: string;
  category: 'health' | 'wealth' | 'relationships';
  priority: 'high' | 'medium' | 'low';
  actionableSteps: string[];
  estimatedTime?: string;
  difficulty?: 'beginner' | 'intermediate' | 'advanced';
  nudgeType?: 'micro-habit' | 'strategic-planning' | 'mindset-shift';
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
    
    if (!geminiApiKey) {
      console.error('❌ GEMINI_API_KEY not found in environment variables');
      return new Response(
        JSON.stringify({ 
          error: 'Gemini API key not configured',
          recommendations: generateFallbackRecommendations()
        }), 
        {
          status: 200, // Return fallback instead of error
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    const { scores, userProfile, responses } = await req.json();

    // Create the prompt for Gemini
    const prompt = createRecommendationPrompt(scores, userProfile, responses);

    // Call Gemini API
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${geminiApiKey}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048,
        }
      }),
    });

    if (!response.ok) {
      console.error('❌ Gemini API request failed:', response.status, response.statusText);
      return new Response(
        JSON.stringify({ 
          error: 'Failed to generate AI recommendations',
          recommendations: generateFallbackRecommendations(scores)
        }), 
        {
          status: 200, // Return fallback instead of error
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    const data = await response.json();
    
    if (!data.candidates || data.candidates.length === 0) {
      console.error('❌ No recommendations generated by Gemini');
      return new Response(
        JSON.stringify({ 
          error: 'No recommendations generated',
          recommendations: generateFallbackRecommendations(scores)
        }), 
        {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    const generatedText = data.candidates[0].content.parts[0].text;
    
    // Parse the AI response
    let recommendations: Recommendation[];
    try {
      recommendations = parseAIRecommendations(generatedText);
    } catch (parseError) {
      console.error('❌ Failed to parse AI recommendations:', parseError);
      recommendations = generateFallbackRecommendations(scores);
    }

    console.log(`✅ Generated ${recommendations.length} AI recommendations`);
    
    return new Response(
      JSON.stringify({ recommendations }), 
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );

  } catch (error) {
    console.error('❌ Error in generate-recommendations function:', error);
    
    return new Response(
      JSON.stringify({ 
        error: 'Internal server error',
        recommendations: generateFallbackRecommendations()
      }), 
      {
        status: 200, // Return fallback instead of error
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});

function createRecommendationPrompt(scores: ScoreBreakdown, userProfile: UserProfile, responses: any[]): string {
  return `You are a wellness coach providing personalized recommendations based on assessment results.

User Profile:
- Age: ${userProfile.age || 'Not specified'}
- Gender: ${userProfile.gender || 'Not specified'}
- Occupation: ${userProfile.occupation || 'Not specified'}
- Location: ${userProfile.location || 'Not specified'}

Assessment Scores:
- Health: ${scores.health.percentage.toFixed(1)}% (${scores.health.total}/${scores.health.max})
- Wealth: ${scores.wealth.percentage.toFixed(1)}% (${scores.wealth.total}/${scores.wealth.max})
- Relationships: ${scores.relationships.percentage.toFixed(1)}% (${scores.relationships.total}/${scores.relationships.max})
- Overall: ${scores.overall.percentage.toFixed(1)}% (Grade: ${scores.overall.grade}, Level: ${scores.overall.level})

Component Breakdown:
Health: ${JSON.stringify(scores.health.components)}
Wealth: ${JSON.stringify(scores.wealth.components)}
Relationships: ${JSON.stringify(scores.relationships.components)}

Please provide 3-5 personalized, actionable recommendations in the following JSON format:
[
  {
    "title": "Specific, actionable title",
    "description": "Detailed explanation of why this recommendation matters for this user",
    "category": "health|wealth|relationships",
    "priority": "high|medium|low",
    "actionableSteps": ["Step 1", "Step 2", "Step 3"],
    "estimatedTime": "Time commitment",
    "difficulty": "beginner|intermediate|advanced",
    "nudgeType": "micro-habit|strategic-planning|mindset-shift"
  }
]

Focus on:
1. The lowest scoring areas that need the most improvement
2. Specific, measurable actions the user can take
3. Recommendations appropriate for their age, occupation, and lifestyle
4. Building on existing strengths where possible

Return only the JSON array, no additional text.`;
}

function parseAIRecommendations(text: string): Recommendation[] {
  try {
    // Extract JSON from the response (handle potential markdown formatting)
    const jsonMatch = text.match(/\[[\s\S]*\]/);
    if (!jsonMatch) {
      throw new Error('No JSON array found in AI response');
    }
    
    const recommendations = JSON.parse(jsonMatch[0]);
    
    // Validate the structure
    if (!Array.isArray(recommendations)) {
      throw new Error('Response is not an array');
    }
    
    return recommendations.map((rec: any) => ({
      title: rec.title || 'Personalized Recommendation',
      description: rec.description || 'Based on your assessment results',
      category: rec.category || 'health',
      priority: rec.priority || 'medium',
      actionableSteps: Array.isArray(rec.actionableSteps) ? rec.actionableSteps : ['Take action based on this recommendation'],
      estimatedTime: rec.estimatedTime || '15-30 minutes daily',
      difficulty: rec.difficulty || 'beginner',
      nudgeType: rec.nudgeType || 'micro-habit'
    }));
    
  } catch (error) {
    console.error('Failed to parse AI recommendations:', error);
    throw error;
  }
}

function generateFallbackRecommendations(scores?: ScoreBreakdown): Recommendation[] {
  const recommendations: Recommendation[] = [];
  
  if (!scores) {
    return [{
      title: 'Start Your Wellness Journey',
      description: 'Begin with small, manageable changes to build momentum and improve your overall wellness.',
      category: 'health',
      priority: 'medium',
      actionableSteps: [
        'Choose one area to focus on this week',
        'Set a specific, measurable goal',
        'Track your progress daily'
      ],
      estimatedTime: '5-10 minutes daily',
      difficulty: 'beginner',
      nudgeType: 'micro-habit'
    }];
  }
  
  // Health recommendations
  if (scores.health.total < scores.health.max * 0.7) {
    recommendations.push({
      title: 'Improve Daily Health Habits',
      description: 'Focus on fundamental health practices like nutrition, exercise, and sleep to boost your wellness score.',
      category: 'health',
      priority: 'high',
      actionableSteps: [
        'Drink 8 glasses of water daily',
        'Take a 15-minute walk every day',
        'Establish a consistent sleep schedule'
      ],
      estimatedTime: '15-20 minutes daily',
      difficulty: 'beginner',
      nudgeType: 'micro-habit'
    });
  }
  
  // Wealth recommendations
  if (scores.wealth.total < scores.wealth.max * 0.7) {
    recommendations.push({
      title: 'Develop Wealth-Building Skills',
      description: 'Focus on improving your work quality, creativity, and finding balance between work and rest.',
      category: 'wealth',
      priority: 'medium',
      actionableSteps: [
        'Identify one skill to improve this week',
        'Schedule dedicated creative time',
        'Plan regular rest periods'
      ],
      estimatedTime: '30 minutes daily',
      difficulty: 'beginner',
      nudgeType: 'strategic-planning'
    });
  }
  
  // Relationships recommendations
  if (scores.relationships.total < scores.relationships.max * 0.7) {
    recommendations.push({
      title: 'Strengthen Social Connections',
      description: 'Work on improving your mental and emotional wellbeing, and strengthen connections with family and friends.',
      category: 'relationships',
      priority: 'medium',
      actionableSteps: [
        'Practice daily gratitude journaling',
        'Reach out to one friend or family member',
        'Set aside time for self-reflection'
      ],
      estimatedTime: '10-15 minutes daily',
      difficulty: 'beginner',
      nudgeType: 'micro-habit'
    });
  }
  
  // Always return at least one recommendation
  if (recommendations.length === 0) {
    recommendations.push({
      title: 'Start Your Wellness Journey',
      description: 'Begin with small, manageable changes to build momentum and improve your overall wellness score.',
      category: 'health',
      priority: 'medium',
      actionableSteps: [
        'Choose one area to focus on this week',
        'Set a specific, measurable goal',
        'Track your progress daily'
      ],
      estimatedTime: '5-10 minutes daily',
      difficulty: 'beginner',
      nudgeType: 'micro-habit'
    });
  }
  
  return recommendations;
}